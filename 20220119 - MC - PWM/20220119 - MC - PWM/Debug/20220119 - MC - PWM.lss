
20220119 - MC - PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000102  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005f6  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000577  00000000  00000000  00000822  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000021b  00000000  00000000  00000d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032f  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000132b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6d 00 	call	0xda	; 0xda <main>
  8a:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:

int  startwert = 0;
bool on = true;


ISR(TIMER0_OVF_vect){ // Interrupt Service Routine
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	
	
	if(on){
  a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	88 23       	and	r24, r24
  a6:	49 f0       	breq	.+18     	; 0xba <__vector_9+0x28>
		
		PORTA ^=  (1<<PA0) | (1<<PA1) ;
  a8:	9b b3       	in	r25, 0x1b	; 27
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	89 27       	eor	r24, r25
  ae:	8b bb       	out	0x1b, r24	; 27
		//PORTA =  (0<<PA0) | (0<<PA1) ; //Nur LED0 und LED1 werden geschaltet
		TCNT0 = (256-(256*0.9)) ; //aus
  b0:	89 e1       	ldi	r24, 0x19	; 25
  b2:	82 bf       	out	0x32, r24	; 50
		on = false;
  b4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  b8:	09 c0       	rjmp	.+18     	; 0xcc <__vector_9+0x3a>
	}else {
		
		PORTA ^= (1<<PA0) | (1<<PA1);
  ba:	9b b3       	in	r25, 0x1b	; 27
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	89 27       	eor	r24, r25
  c0:	8b bb       	out	0x1b, r24	; 27
		//PORTA =  (1<<PA0) | (1<<PA1) ; //Nur LED0 und LED1 werden geschaltet
		TCNT0 = (256-(256*0.1)) ;// an 
  c2:	86 ee       	ldi	r24, 0xE6	; 230
  c4:	82 bf       	out	0x32, r24	; 50
		on = true;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	
	
	 
}
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <main>:

int main(void)
{
	sei();
  da:	78 94       	sei
	
	DDRA = 0xFF; ////activate PULL-UPs
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;	// Anfangszustand LEDs Alle an!!	
  e0:	8b bb       	out	0x1b, r24	; 27
	
	TIMSK |= (1<<TOIE0);// Overflow Interrupt aktivieren
  e2:	89 b7       	in	r24, 0x39	; 57
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	89 bf       	out	0x39, r24	; 57
		
	//TimerCounter0 konfig als Zaehler
	TCCR0 |= ( 0 << CS02 ) | ( 0 << CS01 ) | ( 1 << CS00 ); //Vorteiler 1/64
  e8:	83 b7       	in	r24, 0x33	; 51
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	83 bf       	out	0x33, r24	; 51
	*maximal schritte = 65536
	* x = (1 * 65536) / 4,1934
	*x = 15628
	*Startwert = 65536 - 15628 => 49908
	*/
	startwert = 256;
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
  f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	TCNT0 = startwert; //Startwert setzen für eine 1 sek
  fa:	12 be       	out	0x32, r1	; 50
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0x22>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
