
20211220 - MC - PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d7  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000555  00000000  00000000  0000077b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fd  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000012a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_8>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_8>:
//




ISR(TIMER1_OVF_vect){ // Interrupt Service Routine
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25

	PORTA = ~PORTA;
  7a:	8b b3       	in	r24, 0x1b	; 27
  7c:	80 95       	com	r24
  7e:	8b bb       	out	0x1b, r24	; 27
	//PORTA ^= (1<<PA1); //licht wird getoggelt bei jedem ISR-durchlauf

	TCNT1 = 49908;
  80:	84 ef       	ldi	r24, 0xF4	; 244
  82:	92 ec       	ldi	r25, 0xC2	; 194
  84:	9d bd       	out	0x2d, r25	; 45
  86:	8c bd       	out	0x2c, r24	; 44


}
  88:	9f 91       	pop	r25
  8a:	8f 91       	pop	r24
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <main>:



int main(void)
{
	sei();
  96:	78 94       	sei
	
	DDRA = 0xFF; ////activate PULL-UPs //auf Ausgang setzen
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  9c:	1b ba       	out	0x1b, r1	; 27

	TIMSK |= (1<<TOIE1);// Overflow Interrupt aktivieren
  9e:	89 b7       	in	r24, 0x39	; 57
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	89 bf       	out	0x39, r24	; 57

	//TimerCounter0 konfig als Zaehler
	//TCCR0 |= ( 0 << CS02 ) | ( 1 << CS01 ) | ( 1 << CS00 ); //Vorteiler 1/16
	TCCR1B |=  ( 0 << CS12 ) | ( 1 << CS11 ) | ( 1 << CS10 ); //Vorteiler 1/64
  a4:	8e b5       	in	r24, 0x2e	; 46
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	8e bd       	out	0x2e, r24	; 46
	//max Schritte 65536
	//x = ( 1* 65536)/4.1934
	//X = 15628
	//Startwert= 65536-15628 = 49908
	
	TCNT1 = 49908;
  aa:	84 ef       	ldi	r24, 0xF4	; 244
  ac:	92 ec       	ldi	r25, 0xC2	; 194
  ae:	9d bd       	out	0x2d, r25	; 45
  b0:	8c bd       	out	0x2c, r24	; 44
	
	sei();
  b2:	78 94       	sei
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x1e>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
