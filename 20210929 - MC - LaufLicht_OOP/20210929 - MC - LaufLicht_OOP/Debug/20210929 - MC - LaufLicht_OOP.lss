
20210929 - MC - LaufLicht_OOP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000132  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d9  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000614  00000000  00000000  00000935  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a2  00000000  00000000  00000f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000396  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  000015c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001679  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  7a:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <delay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f e9       	ldi	r18, 0x9F	; 159
  84:	86 e8       	ldi	r24, 0x86	; 134
  86:	91 e0       	ldi	r25, 0x01	; 1
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <delay+0x6>
  90:	00 c0       	rjmp	.+0      	; 0x92 <delay+0x10>
  92:	00 00       	nop
  94:	08 95       	ret

00000096 <main>:
  _delay_ms(500);
  
}

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	a0 97       	sbiw	r28, 0x20	; 32
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF; //als output definieren
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  ae:	1b ba       	out	0x1b, r1	; 27
    unsigned int tab[8] = {128,64,32,16,8,4,2,1};
  b0:	80 e1       	ldi	r24, 0x10	; 16
  b2:	e0 e6       	ldi	r30, 0x60	; 96
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	de 01       	movw	r26, r28
  b8:	11 96       	adiw	r26, 0x01	; 1
  ba:	01 90       	ld	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x24>
    unsigned int tab2[8] = {1,2,4,8,16,32,64,128};
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	e0 e7       	ldi	r30, 0x70	; 112
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	de 01       	movw	r26, r28
  ca:	51 96       	adiw	r26, 0x11	; 17
  cc:	01 90       	ld	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	8a 95       	dec	r24
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x36>
      
    
    while (1) 
    {
      int i = 0;
  d4:	00 e0       	ldi	r16, 0x00	; 0
  d6:	10 e0       	ldi	r17, 0x00	; 0
      while (i<8)
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <main+0x62>
      {
        
		PORTA = tab[i];
  da:	f8 01       	movw	r30, r16
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	8c 0f       	add	r24, r28
  e6:	9d 1f       	adc	r25, r29
  e8:	e8 0f       	add	r30, r24
  ea:	f9 1f       	adc	r31, r25
  ec:	80 81       	ld	r24, Z
  ee:	8b bb       	out	0x1b, r24	; 27
		delay();
  f0:	0e 94 41 00 	call	0x82	; 0x82 <delay>
		i++;
  f4:	0f 5f       	subi	r16, 0xFF	; 255
  f6:	1f 4f       	sbci	r17, 0xFF	; 255
      
    
    while (1) 
    {
      int i = 0;
      while (i<8)
  f8:	08 30       	cpi	r16, 0x08	; 8
  fa:	11 05       	cpc	r17, r1
  fc:	74 f3       	brlt	.-36     	; 0xda <main+0x44>
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	10 e0       	ldi	r17, 0x00	; 0
 102:	0f c0       	rjmp	.+30     	; 0x122 <main+0x8c>
		i++;
		
      }  
      for (int i =0; i<8; i++)
      {
        PORTA = tab2[i];
 104:	f8 01       	movw	r30, r16
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	8c 0f       	add	r24, r28
 110:	9d 1f       	adc	r25, r29
 112:	e8 0f       	add	r30, r24
 114:	f9 1f       	adc	r31, r25
 116:	80 89       	ldd	r24, Z+16	; 0x10
 118:	8b bb       	out	0x1b, r24	; 27
        delay();
 11a:	0e 94 41 00 	call	0x82	; 0x82 <delay>
		PORTA = tab[i];
		delay();
		i++;
		
      }  
      for (int i =0; i<8; i++)
 11e:	0f 5f       	subi	r16, 0xFF	; 255
 120:	1f 4f       	sbci	r17, 0xFF	; 255
 122:	08 30       	cpi	r16, 0x08	; 8
 124:	11 05       	cpc	r17, r1
 126:	74 f3       	brlt	.-36     	; 0x104 <main+0x6e>
      {
        PORTA = tab2[i];
        delay();
      }
      delay();
 128:	0e 94 41 00 	call	0x82	; 0x82 <delay>
        
    }
 12c:	d3 cf       	rjmp	.-90     	; 0xd4 <main+0x3e>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
