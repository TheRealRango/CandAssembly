
20210922 - MC - LauflichT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d5  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f1  00000000  00000000  000008a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c8  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009b  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000015eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	2f e9       	ldi	r18, 0x9F	; 159
  6e:	86 e8       	ldi	r24, 0x86	; 134
  70:	91 e0       	ldi	r25, 0x01	; 1
  72:	21 50       	subi	r18, 0x01	; 1
  74:	80 40       	sbci	r24, 0x00	; 0
  76:	90 40       	sbci	r25, 0x00	; 0
  78:	e1 f7       	brne	.-8      	; 0x72 <delay+0x6>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <delay+0x10>
  7c:	00 00       	nop
  7e:	08 95       	ret

00000080 <blink>:
	_delay_ms(500);
}

void blink(void)
{
	delay();
  80:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
	PORTA = 0x00;
  84:	1b ba       	out	0x1b, r1	; 27
	delay();
  86:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
	PORTA = 0xff;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8b bb       	out	0x1b, r24	; 27
	delay();
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
  92:	08 95       	ret

00000094 <lauflicht>:
}

void lauflicht(void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
	for (int i =0; i<8; i++)
  98:	c0 e0       	ldi	r28, 0x00	; 0
  9a:	d0 e0       	ldi	r29, 0x00	; 0
  9c:	0d c0       	rjmp	.+26     	; 0xb8 <lauflicht+0x24>
	{
		PORTA =(1<<i);
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0c 2e       	mov	r0, r28
  a4:	02 c0       	rjmp	.+4      	; 0xaa <lauflicht+0x16>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	0a 94       	dec	r0
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <lauflicht+0x12>
  ae:	8b bb       	out	0x1b, r24	; 27
		delay();
  b0:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTA = 0x00;
  b4:	1b ba       	out	0x1b, r1	; 27
	delay();
}

void lauflicht(void)
{
	for (int i =0; i<8; i++)
  b6:	21 96       	adiw	r28, 0x01	; 1
  b8:	c8 30       	cpi	r28, 0x08	; 8
  ba:	d1 05       	cpc	r29, r1
  bc:	84 f3       	brlt	.-32     	; 0x9e <lauflicht+0xa>
	{
		PORTA =(1<<i);
		delay();
		PORTA = 0x00;
	}
}
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <main>:

int main(void)
{
	
	DDRA = 0xFF;	//set PORTB als output
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a bb       	out	0x1a, r24	; 26

	while (1)
	{
		blink();
  c8:	0e 94 40 00 	call	0x80	; 0x80 <blink>
		lauflicht();
  cc:	0e 94 4a 00 	call	0x94	; 0x94 <lauflicht>
  d0:	fb cf       	rjmp	.-10     	; 0xc8 <main+0x4>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
